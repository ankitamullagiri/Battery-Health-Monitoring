# -*- coding: utf-8 -*-
"""Battery Health Monitoring

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GYRfbblQf9iWWrN9n76iivSktQrHXMLk
"""

import pandas as pd
import matplotlib.pyplot as plt

file_names = ['battery1.csv', 'battery2.csv', 'battery3.csv', 'battery4.csv', 'battery5.csv']
dataframes = []
for file_name in file_names:
    df = pd.read_csv(file_name, index_col=0, parse_dates=False)                                #extracting the time column and printing
    dataframes.append(df)
    print(df)
    df.index = pd.to_datetime(df.index)
    data_df = df.resample("H").mean()
    print(data_df)

file_names = ['battery1.csv', 'battery2.csv', 'battery3.csv', 'battery4.csv', 'battery5.csv']
dataframes = []
for file_name in file_names:
    df = pd.read_csv(file_name, index_col=0, parse_dates=False)
    dataframes.append(df)                                                                         #converting the time into an hourly series and finding the mean value for better ananlysis
    df.index = df.index.str.replace(' ', '')
    df.index = pd.to_datetime(df.index, format='%d-%b%H:%M:%S')
    data_df = df.resample("H").mean()
    print(data_df)

import pandas as pd
import matplotlib.pyplot as plt

# Define the labels for each battery
battery_labels = ['Battery 6', 'Battery 2', 'Battery 3', 'Battery 4', 'Battery 5']

# Load the CSV files into pandas dataframes
file_names = ['battery6.csv', 'battery2.csv', 'battery3.csv', 'battery4.csv', 'battery5.csv']
dataframes = []
for file_name in file_names:
    df = pd.read_csv(file_name)
    dataframes.append(df)

# Iterate over each battery dataframe
for i, df in enumerate(dataframes):
    # Extract the relevant columns
    temperature = df['battery temp']
    voltage = df['battery voltage( V )']
    charge_discharge_cycle = df['charge discharge_cycles']
    soc = df['soc( % )']
    current = df['current( A )']
    time = df['time']

    # Visual analysis
    plt.figure(figsize=(12, 10))

    # Line plot: Battery Temperature
    plt.subplot(3, 2, 1)
    plt.plot(time, temperature)
    plt.xlabel('Time')
    plt.ylabel('Temperature (Â°C)')
    plt.title('Battery Temperature')

    # Line plot: Battery Voltage
    plt.subplot(3, 2, 2)
    plt.plot(time, voltage)
    plt.xlabel('Time')
    plt.ylabel('Voltage (V)')
    plt.title('Battery Voltage')

    # Line plot: Charge-Discharge Cycle
    plt.subplot(3, 2, 3)
    plt.plot(time, charge_discharge_cycle)
    plt.xlabel('Time')
    plt.ylabel('Charge-Discharge Cycle')
    plt.title('Charge-Discharge Cycle')

    # Line plot: State of Charge (SOC)
    plt.subplot(3, 2, 4)
    plt.plot(time, soc)
    plt.xlabel('Time')
    plt.ylabel('SOC (%)')
    plt.title('State of Charge (SOC)')

    # Line plot: Current
    plt.subplot(3, 2, 5)
    plt.plot(time, current)
    plt.xlabel('Time')
    plt.ylabel('Current (A)')
    plt.title('Current')

    # Adjust subplots layout
    plt.tight_layout()

    # Show the plots with battery labels
    plt.suptitle(f'{battery_labels[i]} - Visual Analysis')
    plt.show()

import pandas as pd

# Define the battery names
battery_names = ['Battery 6', 'Battery 2', 'Battery 3', 'Battery 4', 'Battery 5']

# Load the CSV files into pandas dataframes
file_names = ['battery6.csv', 'battery2.csv', 'battery3.csv', 'battery4.csv', 'battery5.csv']
dataframes = []
for file_name in file_names:
    df = pd.read_csv(file_name)
    dataframes.append(df)

# Create a dataframe to store the average attribute values
average_attributes_df = pd.DataFrame(columns=['Battery', 'Average Battery Temp', 'Average Battery Voltage', 'Average Charge-Discharge Cycle', 'Average SOC', 'Average Current'])

# Iterate over each battery dataframe
for i, df in enumerate(dataframes):
    # Extract the relevant columns
    temperature = df['battery temp']
    voltage = df['battery voltage( V )']
    charge_discharge_cycle = df['charge discharge_cycles']
    soc = df['soc( % )']
    current = df['current( A )']

    # Calculate the average values for each attribute over 24 hours
    average_temp = temperature.mean()
    average_voltage = voltage.mean()
    average_charge_discharge = charge_discharge_cycle.mean()
    average_soc = soc.mean()
    average_current = current.mean()

    # Append the average attribute values to the dataframe
    average_attributes_df = average_attributes_df.append({'Battery': battery_names[i],
                                                          'Average Battery Temp': average_temp,
                                                          'Average Battery Voltage': average_voltage,
                                                          'Average Charge-Discharge Cycle': average_charge_discharge,
                                                          'Average SOC': average_soc,
                                                          'Average Current': average_current}, ignore_index=True)

# Find the battery with the highest and lowest average values for each attribute
highest_temp_battery = average_attributes_df.loc[average_attributes_df['Average Battery Temp'].idxmax()]['Battery']
lowest_temp_battery = average_attributes_df.loc[average_attributes_df['Average Battery Temp'].idxmin()]['Battery']
highest_voltage_battery = average_attributes_df.loc[average_attributes_df['Average Battery Voltage'].idxmax()]['Battery']
lowest_voltage_battery = average_attributes_df.loc[average_attributes_df['Average Battery Voltage'].idxmin()]['Battery']
highest_charge_discharge_battery = average_attributes_df.loc[average_attributes_df['Average Charge-Discharge Cycle'].idxmax()]['Battery']
lowest_charge_discharge_battery = average_attributes_df.loc[average_attributes_df['Average Charge-Discharge Cycle'].idxmin()]['Battery']
highest_soc_battery = average_attributes_df.loc[average_attributes_df['Average SOC'].idxmax()]['Battery']
lowest_soc_battery = average_attributes_df.loc[average_attributes_df['Average SOC'].idxmin()]['Battery']
highest_current_battery = average_attributes_df.loc[average_attributes_df['Average Current'].idxmax()]['Battery']
lowest_current_battery = average_attributes_df.loc[average_attributes_df['Average Current'].idxmin()]['Battery']

# Print the results
print("Battery with highest average attribute values:")
print(f"- Battery Temp: {highest_temp_battery}")
print(f"- Battery Voltage: {highest_voltage_battery}")
print(f"- Charge-Discharge Cycle: {highest_charge_discharge_battery}")
print(f"- SOC: {highest_soc_battery}")
print(f"- Current: {highest_current_battery}")

print("\nBattery with lowest average attribute values:")
print(f"- Battery Temp: {lowest_temp_battery}")
print(f"- Battery Voltage: {lowest_voltage_battery}")
print(f"- Charge-Discharge Cycle: {lowest_charge_discharge_battery}")
print(f"- SOC: {lowest_soc_battery}")
print(f"- Current: {lowest_current_battery}")

import pandas as pd

# Define the battery names
battery_names = ['Battery 6', 'Battery 2', 'Battery 3', 'Battery 4', 'Battery 5']

# Load the CSV files into pandas dataframes
file_names = ['battery6.csv', 'battery2.csv', 'battery3.csv', 'battery4.csv', 'battery5.csv']
dataframes = []
for file_name in file_names:
    df = pd.read_csv(file_name)
    dataframes.append(df)

# Create a dataframe to store the average attribute values
average_attributes_df = pd.DataFrame(columns=['Battery', 'Average Battery Temp', 'Average Battery Voltage', 'Average Charge-Discharge Cycle', 'Average SOC', 'Average Current'])

# Iterate over each battery dataframe
for i, df in enumerate(dataframes):
    # Extract the relevant columns
    temperature = df['battery temp']
    voltage = df['battery voltage( V )']
    charge_discharge_cycle = df['charge discharge_cycles']
    soc = df['soc( % )']
    current = df['current( A )']

    # Calculate the average values for each attribute
    average_temp = temperature.mean()
    average_voltage = voltage.mean()
    average_charge_discharge = charge_discharge_cycle.mean()
    average_soc = soc.mean()
    average_current = current.mean()

    # Append the average attribute values to the dataframe
    average_attributes_df = average_attributes_df.append({'Battery': battery_names[i],
                                                          'Average Battery Temp': average_temp,
                                                          'Average Battery Voltage': average_voltage,
                                                          'Average Charge-Discharge Cycle': average_charge_discharge,
                                                          'Average SOC': average_soc,
                                                          'Average Current': average_current}, ignore_index=True)

# Sort the dataframe based on the average values in descending order
sorted_average_attributes_df = average_attributes_df.sort_values(by=['Average Battery Temp',
                                                                     'Average Battery Voltage',
                                                                     'Average Charge-Discharge Cycle',
                                                                     'Average SOC',
                                                                     'Average Current'],
                                                                ascending=False)

# Display the sorted dataframe
print("Average Attribute Values for Each Battery (in Descending Order):")
print(sorted_average_attributes_df)